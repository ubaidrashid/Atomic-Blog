{"ast":null,"code":"var _jsxFileName = \"E:\\\\documents\\\\AtomicBlog-by_oss\\\\atomic-blo\\\\src\\\\PostContextProc.js\",\n  _s = $RefreshSig$();\n// PostContextProc.js\n\nimport React, { createContext, useState } from 'react';\nimport faker from \"faker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostContext = /*#__PURE__*/createContext();\nfunction createRandomPost() {\n  return {\n    title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\n    body: faker.hacker.phrase()\n  };\n}\nfunction PostContextProc({\n  children\n}) {\n  _s();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [posts, setPosts] = useState(() => Array.from({\n    length: 30\n  }, () => createRandomPost()));\n  function handleAddPost(post) {\n    setPosts(posts => [post, ...posts]);\n  }\n  function handleClearPosts() {\n    setPosts([]);\n  }\n  const searchedPosts = searchQuery.length > 0 ? posts.filter(post => `${post.title} ${post.body}`.toLowerCase().includes(searchQuery.toLowerCase())) : posts;\n  return /*#__PURE__*/_jsxDEV(PostContext.Provider, {\n    value: {\n      posts: searchedPosts,\n      onClearPosts: handleClearPosts,\n      searchQuery: searchQuery,\n      setSearchQuery: setSearchQuery,\n      onAddPost: handleAddPost\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(PostContextProc, \"bBtRrIeWDSHoLQufCjAPjvasb2s=\");\n_c = PostContextProc;\nexport { PostContext, PostContextProc, createRandomPost };\nvar _c;\n$RefreshReg$(_c, \"PostContextProc\");","map":{"version":3,"names":["React","createContext","useState","faker","jsxDEV","_jsxDEV","PostContext","createRandomPost","title","hacker","adjective","noun","body","phrase","PostContextProc","children","_s","searchQuery","setSearchQuery","posts","setPosts","Array","from","length","handleAddPost","post","handleClearPosts","searchedPosts","filter","toLowerCase","includes","Provider","value","onClearPosts","onAddPost","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/documents/AtomicBlog-by_oss/atomic-blo/src/PostContextProc.js"],"sourcesContent":["// PostContextProc.js\r\n\r\nimport React, { createContext, useState } from 'react';\r\nimport  faker from \"faker\";\r\n\r\nconst PostContext = createContext();\r\n\r\nfunction createRandomPost() {\r\n    return {\r\n        title: `${faker.hacker.adjective()} ${faker.hacker.noun()}`,\r\n        body: faker.hacker.phrase(),\r\n    };\r\n}\r\n\r\nfunction PostContextProc({ children }) {\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    \r\n    const [posts, setPosts] = useState(() =>\r\n        Array.from({ length: 30 }, () => createRandomPost())\r\n    );\r\n\r\n    function handleAddPost(post) {\r\n        setPosts((posts) => [post, ...posts]);\r\n    }\r\n\r\n    function handleClearPosts() {\r\n        setPosts([]);\r\n    }\r\n\r\n    const searchedPosts =\r\n        searchQuery.length > 0\r\n            ? posts.filter((post) =>\r\n                `${post.title} ${post.body}`\r\n                    .toLowerCase()\r\n                    .includes(searchQuery.toLowerCase())\r\n            )\r\n            : posts;\r\n\r\n    return (\r\n        <PostContext.Provider value={{\r\n            posts: searchedPosts,\r\n            onClearPosts: handleClearPosts,\r\n            searchQuery: searchQuery,\r\n            setSearchQuery: setSearchQuery,\r\n            onAddPost: handleAddPost\r\n        }}>\r\n            {children}\r\n        </PostContext.Provider>\r\n    );\r\n}\r\n\r\nexport { PostContext, PostContextProc, createRandomPost };\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AACtD,OAAQC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,SAASM,gBAAgBA,CAAA,EAAG;EACxB,OAAO;IACHC,KAAK,EAAE,GAAGL,KAAK,CAACM,MAAM,CAACC,SAAS,CAAC,CAAC,IAAIP,KAAK,CAACM,MAAM,CAACE,IAAI,CAAC,CAAC,EAAE;IAC3DC,IAAI,EAAET,KAAK,CAACM,MAAM,CAACI,MAAM,CAAC;EAC9B,CAAC;AACL;AAEA,SAASC,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,MAC/BmB,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAG,CAAC,EAAE,MAAMhB,gBAAgB,CAAC,CAAC,CACvD,CAAC;EAED,SAASiB,aAAaA,CAACC,IAAI,EAAE;IACzBL,QAAQ,CAAED,KAAK,IAAK,CAACM,IAAI,EAAE,GAAGN,KAAK,CAAC,CAAC;EACzC;EAEA,SAASO,gBAAgBA,CAAA,EAAG;IACxBN,QAAQ,CAAC,EAAE,CAAC;EAChB;EAEA,MAAMO,aAAa,GACfV,WAAW,CAACM,MAAM,GAAG,CAAC,GAChBJ,KAAK,CAACS,MAAM,CAAEH,IAAI,IAChB,GAAGA,IAAI,CAACjB,KAAK,IAAIiB,IAAI,CAACb,IAAI,EAAE,CACvBiB,WAAW,CAAC,CAAC,CACbC,QAAQ,CAACb,WAAW,CAACY,WAAW,CAAC,CAAC,CAC3C,CAAC,GACCV,KAAK;EAEf,oBACId,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MACzBb,KAAK,EAAEQ,aAAa;MACpBM,YAAY,EAAEP,gBAAgB;MAC9BT,WAAW,EAAEA,WAAW;MACxBC,cAAc,EAAEA,cAAc;MAC9BgB,SAAS,EAAEV;IACf,CAAE;IAAAT,QAAA,EACGA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAACtB,EAAA,CAnCQF,eAAe;AAAAyB,EAAA,GAAfzB,eAAe;AAqCxB,SAASR,WAAW,EAAEQ,eAAe,EAAEP,gBAAgB;AAAG,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}